/* 
* Class			    : documentAutomationController
* Developer			: Rahul Bejgam (ASE - Dextara)
* Created Date		: 08/03/2023
* Description		: This class creates the HTML content for Document Record Generation and passes it to the Queueable Class.
* Last Modified Date: 08/13/2023
*/
global with sharing class documentAutomationController {
    public static Safely safe = new Safely();
    private static Savepoint sp1;
    public class SafeClassException extends Exception { }

    global static void autoGenerateDocumentRecord(Id templateId, List<String> recordIds, String documentNameAfterGeneration, String emailToBeSent) {

        try {
            Id insertedDocumentId;
            String documentContent = '';
            Document__c sectionContentRecord = new Document__c();
            Map<String,String> headerFooterSectionMap = new Map<String,String> {};
            
            for(Document_Template_Section__c singleDataSection : DisplayPDFController.getTemplateSectionsMulRecords(templateId, recordIds , null) ) {
                if(singleDataSection.Type__c == 'Header') {
                    headerFooterSectionMap.put('\"header\"',singleDataSection.Section_Content__c);
                } else if (singleDataSection.Type__c == 'Footer') {
                    headerFooterSectionMap.put('\"footer\"',singleDataSection.Section_Content__c);
                } else if(singleDataSection.Type__c != 'Related Objects') {
                    documentContent = documentContent + singleDataSection.Section_Content__c;
                }  else if(singleDataSection.Type__c == 'Related Objects') {
                    if(singleDataSection.New_Page__c == true){
                        documentContent = documentContent + '<table class="newPagetableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    } else {
                        documentContent = documentContent + '<table class="tableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    }                    
                    documentContent = documentContent + ROsectionAutomationController.getSectionDataAsHTML(recordIds[0], singleDataSection.Id) + '</table>';
                }
            }
            
            /* Document__c record Formation */
            sectionContentRecord.Document_Body__c = documentContent;
            sectionContentRecord.Document_Template__c = templateId;
            sectionContentRecord.Document_Content__c = String.valueof(headerFooterSectionMap).replace('\"header\"=','\"header\":').replace('\"footer\"=','\"footer\":');
            
            Savepoint sp = Database.setSavepoint();
            List<Database.SaveResult> sResult = safe.doInsert(new Document__c[] {sectionContentRecord});
            List<String> errorList = Safely.safeClassExceptionHandlerInsert(sResult);
            
            if(errorList.size()>0) {
                Database.rollback(sp);
                throw new SafeClassException(String.join( errorList, ', ' ));
            }
            
            for(Integer i=0;i<sResult.size();i++) {
                if(sResult.get(i).isSuccess()) {
                    if(sResult.get(i).getId() != null) {
                        insertedDocumentId = sResult.get(i).getId();
                    }
                } else if (!sResult.get(i).isSuccess()) {
                    Database.Error error = sResult.get(i).getErrors().get(0);
                    String failedDML = error.getMessage();
                }               
            }
            Savepoint sp1 = Database.setSavepoint();
            /* Queueing the process for a different Transaction */
            ID enqueuedJobID = System.enqueueJob(new sendEmailAutomation(insertedDocumentId, documentNameAfterGeneration, emailToBeSent));
        } catch (Exception ex) {
            LogHandler.createLog((Id) null,'documentAutomationController.autoGenerateDocumentRecord()','Template Id- '+templateId+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
    }

    global class emailWrapper{
        global List<String> toAddresses; 
        global List<String> toCCAddresses;
        global List<String> toBCCAddresses;
        global String fromAddress;
        global String emailSubject;
        global String emailBody;
        global Id emailTemplateId;
    }
}