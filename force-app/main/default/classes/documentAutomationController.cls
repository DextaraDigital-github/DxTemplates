/* 
* Class			    : documentAutomationController
* Developer			: Rahul Bejgam (ASE - Dextara)
* Created Date		: 08/03/2023
* Description		: This class creates the HTML content for Document Record Generation and passes it to the Queueable Class.
* Last Modified Date: 08/13/2023
*/
global with sharing class documentAutomationController {
    public static Safely safe = new Safely();
    private static Savepoint sp1;
    public class SafeClassException extends Exception { }

    /* This method is for Automated PDF document generation. */
    @InvocableMethod(label='Generate PDF Document through Flow.' description='Generates PDF document in asynchronous mode using the Flow Inputs.')  
    public static void autoGenerateDocumentRecord(List<recordParameters> docParam) {
        if(docParam.size() <= 1){
            for(recordParameters recordParam : docParam){
                try {
                    String documentNameAfterGeneration = recordParam.documentName + '.pdf';
                    Id insertedDocumentId = documentGenerationForAutomationContext(recordParam.templateId,new List<Id> {recordParam.recordId});
                    /* Queueing the process for a different Transaction */
                    System.enqueueJob(new sendEmailAutomation(insertedDocumentId, documentNameAfterGeneration, recordParam.recordId, 'ignoreThisText'));
                } catch (Exception ex) {
                    LogHandler.createLog((Id) null,'documentAutomationController.autoGenerateDocumentRecord()',ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
                }
            }
        } else {
            LogHandler.createLog((Id) null,'documentAutomationController.autoGenerateDocumentRecord()','Automation cannot be performed on more than 1 record at a single time.', 'Automation cannot be performed on more than 1 record at a single time.' ,'Information');
        }
    }
    
    /* This method is for Automated PDF document generation for FOX Cient. Email action is given for this client hence the parameter is accepted. */
    @deprecated
    global static void generateDocument(Id templateId, List<String> recordIds, String documentNameAfterGeneration, String emailToBeSent) {
        try {
            Id insertedDocumentId = documentGenerationForAutomationContext(templateId,recordIds);
            /* Queueing the process for a different Transaction */
            System.enqueueJob(new sendEmailAutomation(insertedDocumentId, documentNameAfterGeneration, emailToBeSent, true));
        } catch (Exception ex) {
            LogHandler.createLog((Id) null,'documentAutomationController.generateDocument()','Template Id- '+templateId+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
    }

    /* This method is for Automated PDF document generation for FOX Cient. Email action is given for this client hence the parameter is accepted. */
    global static void generateDocument(Id templateId, List<String> recordIds, String documentNameAfterGeneration) {
        try {
            Id insertedDocumentId = documentGenerationForAutomationContext(templateId,recordIds);
            /* Queueing the process for a different Transaction */
            System.enqueueJob(new sendEmailAutomation(insertedDocumentId, documentNameAfterGeneration, true));
        } catch (Exception ex) {
            LogHandler.createLog((Id) null,'documentAutomationController.generateDocument()','Template Id- '+templateId+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
    }

    /* This method is for Automated PDF document generation for FOX Cient. Email action is given for this client hence the parameter is accepted. */
    global static void generateDocument(String methodName,Map<string,Object> inputMap) {
        try {
            Id templateId = (Id) (inputMap.containsKey('templateId')?inputMap.get('templateId'):null);
            List<String> recordIds = (List<String>) (inputMap.containsKey('recordIds')?inputMap.get('recordIds'):new List<String>());
            String documentNameAfterGeneration = (String) (inputMap.containsKey('documentNameAfterGeneration')?inputMap.get('documentNameAfterGeneration'):null);
            if(templateId!=null && !recordIds.isEmpty() )
            {
                Id insertedDocumentId = documentGenerationForAutomationContext(templateId,recordIds);
                Map<string,Object> outputMap=new Map<string,Object>();
                outputMap.putAll(inputMap);
                outputMap.put('insertedDocumentId',insertedDocumentId);
                // Queueing the process for a different Transaction 
                System.enqueueJob(new sendEmailAutomation('NA',outputMap));
            }
            
        } catch (Exception ex) {
            LogHandler.createLog((Id) null,'documentAutomationController.generateDocument()','Template Id- '+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
    }

    private static Id documentGenerationForAutomationContext(Id templateId,List<Id> recordIds){
        Id insertedDocumentId;
        try{
            String documentContent = '';
            Document__c sectionContentRecord = new Document__c();
            Map<String,String> headerFooterSectionMap = new Map<String,String> {};
            
            for(Document_Template_Section__c singleDataSection : DisplayPDFController.getTemplateSectionsMulRecords(templateId, recordIds , null) ) {
                if(singleDataSection.Type__c == 'Header') {
                    headerFooterSectionMap.put('\"header\"',singleDataSection.Section_Content__c);
                } else if (singleDataSection.Type__c == 'Footer') {
                    headerFooterSectionMap.put('\"footer\"',singleDataSection.Section_Content__c);
                } else if(singleDataSection.Type__c != 'Related Objects') {
                    documentContent = documentContent + singleDataSection.Section_Content__c;
                }  else if(singleDataSection.Type__c == 'Related Objects') {
                    if(singleDataSection.New_Page__c == true){
                        documentContent = documentContent + '<table class="newPagetableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    } else {
                        documentContent = documentContent + '<table class="tableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    }                    
                    documentContent = documentContent + ROsectionAutomationController.getSectionDataAsHTML(recordIds[0], singleDataSection.Id) + '</table>';
                }
            }
            
            /* Document__c record Formation */
            sectionContentRecord.Document_Body__c = documentContent;
            sectionContentRecord.Document_Template__c = templateId;
            sectionContentRecord.Document_Content__c = String.valueof(headerFooterSectionMap).replace('\"header\"=','\"header\":').replace('\"footer\"=','\"footer\":');
            
            Savepoint sp = Database.setSavepoint();
            List<Database.SaveResult> sResult = safe.doInsert(new Document__c[] {sectionContentRecord});
            List<String> errorList = Safely.safeClassExceptionHandlerInsert(sResult);
            
            if(errorList.size()>0) {
                Database.rollback(sp);
                throw new SafeClassException(String.join( errorList, ', ' ));
            }
            
            for(Integer i=0;i<sResult.size();i++) {
                if(sResult.get(i).isSuccess()) {
                    if(sResult.get(i).getId() != null) {
                        insertedDocumentId = sResult.get(i).getId();
                    }
                } else if (!sResult.get(i).isSuccess()) {
                    Database.Error error = sResult.get(i).getErrors().get(0);
                    String failedDML = error.getMessage();
                    insertedDocumentId = null;
                }               
            }
        } catch(Exception ex){
            LogHandler.createLog((Id) null,'documentAutomationController.documentGenerationForAutomationContext()','Document Id- '+insertedDocumentId+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
        return insertedDocumentId;
    }

    @JsonAccess(serializable='always' deserializable='always')
    global class emailWrapper{
        global List<String> toAddresses; 
        global List<String> toCCAddresses;
        global List<String> toBCCAddresses;
        global String fromAddress;
        global String emailSubject;
        global String emailBody;
        global Id emailTemplateId;
        global List<Id> contentDocumentIds;
        global Map<Id,String> contentFugitiveMap;
    }

    /* This wrapper is to be deprecated.*/
    public class recordParameters {
        @InvocableVariable(required=true label='Record Id' description='Id for the record that needs the PDF to be generated and attached.')
        public String recordId;
        @InvocableVariable(required=true label='Template Id' description='Id for the Template that needs to be used for PDF generation.')
        public String templateId;
		@InvocableVariable (required=true label='Document Name' description='PDF document name. Do not append .pdf, DXTemplates does it for you.')
		public String documentName = null;         
    }
}