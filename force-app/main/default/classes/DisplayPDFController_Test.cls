@IsTest
private class DisplayPDFController_Test {
    
    @IsTest 
    static void testGetTemplateSections() {
        List<Document_Template_Section__c> result;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity;
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c( Document_Template__c = testTemplate.Id, Section_Content__c = '<p>Test Section Content</p>', Type__c = 'Context', Sequence__c = 1 );
            insert testSection;
            result = DisplayPDFController.getTemplateSections( testTemplate.Id, testOpportunity.Id, 'Opportunity' );  
        }
        Test.stopTest();
        Assert.areEqual(1, result.size(), 'Expected one section');
        Assert.areEqual('<p>Test Section Content</p>', result[0].Section_Content__c); 
    }

    @IsTest 
    static void testGeneratePDFAttachment() {
        String result;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document__c testDocument = new Document__c(Document_Body__c = 'Test Document Body');
            insert testDocument;       
            Opportunity testOpp = new Opportunity( Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpp;
            PageReference testPage = Page.renderAsPdfLWC;
            Test.setCurrentPage(testPage);
            result = DisplayPDFController.generatePDFAttachment(testDocument.Id, testOpp.Id);
        }
        Test.stopTest(); 
        Assert.areNotEqual(null, result, 'Result should not be null');   
    }
    
    @IsTest 
    static void testGenerateDocument() {
        String result;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document__c testDocument = new Document__c(Document_Body__c = 'Test Document Body');
            insert testDocument;                  
            Opportunity testOpp = new Opportunity( Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpp;                
            result = DisplayPDFController.generateDocument( testDocument.Id, testOpp.Id, 'Test PDF Body', 'Test PDF Header/Footer' );                
        }
        Test.stopTest();
        Assert.areNotEqual(null, result, 'Result should not be null');
    }
    
    @IsTest 
    static void testSavePDFtoQuote() {
        String result;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpp = new Opportunity( Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpp;
            Attachment testAttachment = new Attachment( Name = 'Test Attachment', Body = Blob.valueOf('Test PDF Body'),ParentId = testOpp.Id );
            insert testAttachment;
            result = DisplayPDFController.SavePDFtoQuote( testAttachment.Id, testOpp.Id, 'A4', 'Test PDF Name');
        }
        Test.stopTest();    
        Assert.areNotEqual(null, result, 'Result should not be null');
    }
    
    @IsTest 
    static void testAutoGenerateDocumentRecord() {
        Integer asyncJobsBefore = [Select Id from AsyncApexJob].size();
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity;   
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;   
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Test Section', Type__c = 'Header', Section_Content__c = '<h1>Test Header</h1>', Document_Template__c = testTemplate.Id
            );
            insert testSection;
            
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
            arr.templateId =  testTemplate.Id;
            arr.recordId = testOpportunity.Id;
            arr.documentName = 'Test Document';
            ids.add(arr);
            documentAutomationController.autoGenerateDocumentRecord(ids);            
        }
        Test.stopTest();
        Assert.areNotEqual(asyncJobsBefore, [Select Id from AsyncApexJob].size(), 'One Queued Job must be executed');
    }
    
    @IsTest 
    static void testAutoGenerateDocumentRecord1() {
        Integer asyncJobsBefore = [Select Id from AsyncApexJob].size();
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template1');
            insert testTemplate; 
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Header', Type__c = 'Header', Section_Content__c = '{"sectionsCount":"3","sectionsContent":[{"value":"","indexvar":0,"key":"1692937481560:0"},{"value":"","indexvar":2,"key":"1692937481560:2"},{"value":"<p>Rahul</p>","indexvar":1,"key":"1692937486280:1"}]}', Document_Template__c = testTemplate.Id);
            insert testSection;
            Document_Template_Section__c testSection1 = new Document_Template_Section__c(
                Name = 'Footer', Type__c = 'Footer', Section_Content__c = '{"sectionsCount":"3","sectionsContent":[{"value":"","indexvar":0,"key":"1692937481560:0"},{"value":"","indexvar":2,"key":"1692937481560:2"},{"value":"<p>Rahul</p>","indexvar":1,"key":"1692937486280:1"}]}', Document_Template__c = testTemplate.Id);
            insert testSection1;
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
                arr.templateId =  testTemplate.Id;
                arr.recordId = testOpportunity.Id;
            ids.add(arr);            
            documentAutomationController.autoGenerateDocumentRecord(ids);
        }
        Test.stopTest();
        Assert.areNotEqual(asyncJobsBefore, [Select Id from AsyncApexJob].size(), 'One Queued Job must be executed');
    }
    
    @IsTest 
    static void testAutoGenerateDocumentRecord2() {
        Integer asyncJobsBefore = [Select Id from AsyncApexJob].size();
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template1');
            insert testTemplate;   
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Test Section', Type__c = 'Related Objects',
                Header_Content__c = '<table><thead><tr><th style="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="SlNo">SlNo</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Deleted">Name</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Stage">Stage</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">Amount</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">ClosureDate</div></th></tr></thead></table>',
                New_Page__c =false, Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name"],"grouping":"","dateFormat":"564/*","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}', Document_Template__c = testTemplate.Id        		
            );
            insert testSection;
            Document_Template_Section__c testSection1 = new Document_Template_Section__c(
                Name = 'Footer Section', Type__c = 'Footer', Section_Content__c = '<h1>Test Footer</h1>', Document_Template__c = testTemplate.Id,New_Page__c =true
            );
            insert testSection1;
            Document_Template_Section__c testSection2 = new Document_Template_Section__c(
                Name = 'Footer Section', 
                Type__c = 'Header', 
                Section_Content__c = '<h1>Test Header</h1>', 
                Document_Template__c = testTemplate.Id,New_Page__c =true
            );
            insert testSection2;            
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
                arr.templateId =  testTemplate.Id;
                arr.recordId = testOpportunity.Id;
            ids.add(arr);
            documentAutomationController.autoGenerateDocumentRecord(ids);
        }
        Test.stopTest();
        Assert.areNotEqual(asyncJobsBefore, [Select Id from AsyncApexJob].size(), 'One Queued Job must be executed');
    }
    
    @IsTest 
    static void testAutoGenerateDocumentRecord3() {
        Integer asyncJobsBefore = [Select Id from AsyncApexJob].size();
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template1');
            insert testTemplate;   
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Test Section', 
                Type__c = 'Related Objects',
                New_Page__c =true, 
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name"],"grouping":"","dateFormat":"564/*","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}', 
                Header_Content__c = '<table><thead><tr><th style="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="SlNo">SlNo</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Deleted">Name</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Stage">Stage</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">Amount</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">ClosureDate</div></th></tr></thead></table>',
                Document_Template__c = testTemplate.Id
            );
            insert testSection;            
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
                arr.templateId =  testTemplate.Id;
                arr.recordId = testOpportunity.Id;
            ids.add(arr);
            documentAutomationController.autoGenerateDocumentRecord(ids);
        }
        Test.stopTest();
        Assert.areNotEqual(asyncJobsBefore, [Select Id from AsyncApexJob].size(), 'One Queued Job must be executed');
    } 

    @IsTest 
    static void testAutoGenerateDocumentRecordWithGrouping() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();        
        Integer documentRecordCountBefore = [Select Id from Document__c].size();
        Integer documentRecordCountAfter;        
        Integer asyncJobCountBefore = [SELECT Id FROM AsyncApexJob].size();
        Integer asyncJobCountAfter;   
        Integer attchCountBefore = [SELECT Id FROM Attachment].size();
        System.runAs(us){
			List<Account> testAcc = DexUtilTestDataFactory.createAccounts(1,true,null);
            List<Opportunity> oppList = new List<Opportunity> {new Opportunity (Name= 'Delhi Imports',Amount= 7890.12,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Karnataka Imports',Amount= 1234.56,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'West Bengal Imports',Amount= 5678.9,StageName= 'Qualification',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Tamil Nadu Imports',Amount= 2345.67,StageName= 'Negotiation/Review',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Telangana Imports',Amount= 789.01,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Gujarat Imports',Amount= 4321.09,StageName= 'Closed Won',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Maharashtra Imports',Amount= 7654.32,StageName= 'Qualification',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Rajasthan Imports',Amount= 1987.65,StageName= 'Closed Won',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Uttar Pradesh Imports',Amount= 6543.21,StageName= 'Closed Lost',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01))};
            insert oppList;            
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Template Tes 1.0', IsActive__c = true);
            insert testTemplate;            
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Related Objects', Type__c = 'Related Objects', 
                Header_Content__c ='<table><thead><tr><th style="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="SlNo">SlNo</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Deleted">Name</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Stage">Stage</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">Amount</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">ClosureDate</div></th></tr></thead></table>',
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":true,"subTotal":["Amount"],"newPage":false,"displayChart":true,"selGraphvalue":"Amount","chartLabel": "Chart","chartNewPage": true,"chartBarColor": "#E42305","tablelistValues": ["Name","StageName","Amount","CloseDate"],"tablelistLabels": ["Name","Stage","Amount","Close Date"],"grouping": "StageName","dateFormat": "564/","timeFormat": "124","numberFormat": "3","currencyFormat": "2","style": {"category": {"fontcolor": "","backgroundColor": "","fontfamily": "Verdana","fontsize": "10px"},"header": {"fontcolor": "","backgroundColor": "","fontfamily": "Verdana","fontsize": "10px"}}}', 
                Document_Template__c = testTemplate.Id);
            insert testSection;
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
            	arr.documentName = 'Testing Attachment';
                arr.templateId =  testTemplate.Id;
                arr.recordId = testAcc[0].Id;
            ids.add(arr);            
            documentAutomationController.autoGenerateDocumentRecord(ids);
            asyncJobCountAfter = [SELECT Id FROM AsyncApexJob].size();
            documentRecordCountAfter = [Select Id from Document__c].size();
        }
        Test.stopTest();       
        Assert.areNotEqual(attchCountBefore,[Select Id from Attachment].size());
        Assert.areNotEqual(documentRecordCountBefore,documentRecordCountAfter);
        Assert.areNotEqual(asyncJobCountBefore,asyncJobCountAfter);
    }


    @IsTest 
    static void testAutoGenerateDocumentRecordWithoutGrouping() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();        
        Integer documentRecordCountBefore = [Select Id from Document__c].size();
        Integer documentRecordCountAfter;        
        Integer asyncJobCountBefore = [SELECT Id FROM AsyncApexJob].size();
        Integer asyncJobCountAfter;                
        System.runAs(us){
			List<Account> testAcc = DexUtilTestDataFactory.createAccounts(1,true,null);
            List<Opportunity> oppList = new List<Opportunity> {new Opportunity (Name= 'Delhi Imports',Amount= 7890.12,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Karnataka Imports',Amount= 1234.56,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'West Bengal Imports',Amount= 5678.9,StageName= 'Qualification',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Tamil Nadu Imports',Amount= 2345.67,StageName= 'Negotiation/Review',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Telangana Imports',Amount= 789.01,StageName= 'Prospecting',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Gujarat Imports',Amount= 4321.09,StageName= 'Closed Won',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Maharashtra Imports',Amount= 7654.32,StageName= 'Qualification',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Rajasthan Imports',Amount= 1987.65,StageName= 'Closed Won',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01)),new Opportunity (Name= 'Uttar Pradesh Imports',Amount= 6543.21,StageName= 'Closed Lost',AccountId = testAcc[0].Id,CloseDate= Date.newInstance(2024,01,01))};
            insert oppList;            
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Template Tes 1.0', IsActive__c = true);
            insert testTemplate; 
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Related Objects', Type__c = 'Related Objects', 
                Header_Content__c ='<table><thead><tr><th style="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="SlNo">SlNo</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Deleted">Name</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Stage">Stage</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">Amount</div></th><thstyle="width:10px;border:1pxsolidblack;background-color:;color:;font-size:10px;font-family:Verdana;text-align:center;"scope="col"contenteditable="true"word-wrap="break-word;"><divtitle="Amount">ClosureDate</div></th></tr></thead></table>',
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":true,"subTotal":["Amount"],"newPage":false,"displayChart":false,"selGraphvalue":"Amount","chartLabel": "Chart","chartNewPage": true,"chartBarColor": "#E42305","tablelistValues": ["Name","StageName","Amount","CloseDate"],"tablelistLabels": ["Name","Stage","Amount","Close Date"],"grouping": "","dateFormat": "564/","timeFormat": "124","numberFormat": "3","currencyFormat": "2","style": {"category": {"fontcolor": "","backgroundColor": "","fontfamily": "Verdana","fontsize": "10px"},"header": {"fontcolor": "","backgroundColor": "","fontfamily": "Verdana","fontsize": "10px"}}}', 
                Document_Template__c = testTemplate.Id);
            insert testSection;
            List<documentAutomationController.recordParameters> ids = new List<documentAutomationController.recordParameters>();
            documentAutomationController.recordParameters arr = new documentAutomationController.recordParameters();
            	arr.documentName = 'Testing Attachment';
                arr.templateId =  testTemplate.Id;
                arr.recordId = testAcc[0].Id;
            ids.add(arr);            
            documentAutomationController.autoGenerateDocumentRecord(ids);
            asyncJobCountAfter = [SELECT Id FROM AsyncApexJob].size();
            documentRecordCountAfter = [Select Id from Document__c].size();                
        }
        Test.stopTest();
        Assert.areNotEqual(documentRecordCountBefore,documentRecordCountAfter);
        Assert.areNotEqual(asyncJobCountBefore,asyncJobCountAfter);
    }
    
    @IsTest
    static void testGetReferenceObjectAPIName() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Account testAccount = new Account(Name = 'Test Account');
            insert testAccount;
            ROsectionAutomationController.getReferenceObjectAPIName('Account', 'OwnerId');
            ROsectionAutomationController.getReferenceObjectAPIName('Account', '');
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSectionDataAsHTML() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"mainChildObject":"Account","tablelistValues":[],"tablelistLabels":[],"newPage":false}'
            );
            insert testSection; 
            Account testAccount = new Account(Name = 'Test Account');
            insert testAccount;
            String result = ROsectionAutomationController.getSectionDataAsHTML(testAccount.Id, testSection.Id);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }	
    
    @IsTest
    static void testGetSectionDataAsHTML1() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":"","chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","CreatedBy.Id"],"tablelistLabels":["Created Date","Opportunity Type","Amount","CreatedBy.Id"],"grouping":"stagename","dateFormat":"564/","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
            );
            insert testSection; 
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            String result = ROsectionAutomationController.getSectionDataAsHTML(testOpportunity.Id, testSection.Id);
            String createdDate = String.valueOf([SELECT CreatedDate FROM Opportunity WHERE Id = :testOpportunity.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = 0;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(dateStr, timeStr, valKey);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    
    @IsTest
    static void testGetSectionDataAsHTML2() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":"","chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount"],"tablelistLabels":["Created Date","Opportunity Type","Amount"],"grouping":"stagename","dateFormat":"562/*","timeFormat":"1234","numberFormat":"3","currencyFormat":"2","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
            );
            insert testSection; 
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            String result = ROsectionAutomationController.getSectionDataAsHTML(testOpportunity.Id, testSection.Id);
            String createdDate = String.valueOf([SELECT CreatedDate FROM Opportunity WHERE Id = :testOpportunity.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = -1;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(dateStr, timeStr, valKey);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSectionDataAsHTML3() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":"","chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount"],"tablelistLabels":["Created Date","Opportunity Type","Amount"],"grouping":"stagename","dateFormat":"564/*","timeFormat":"123","numberFormat":"3","currencyFormat":"2","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
            );
            insert testSection; 
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            String result = ROsectionAutomationController.getSectionDataAsHTML(testOpportunity.Id, testSection.Id);
            String createdDate = String.valueOf([SELECT CreatedDate FROM Opportunity WHERE Id = :testOpportunity.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = 1;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(dateStr, timeStr, valKey);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSectionDataAsHTML4() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":"","chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount"],"tablelistLabels":["Created Date","Opportunity Type","Amount"],"grouping":"stagename","dateFormat":"564/*","timeFormat":"123","numberFormat":"3","currencyFormat":"2","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
            );
            insert testSection; 
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            String result = ROsectionAutomationController.getSectionDataAsHTML(testOpportunity.Id, testSection.Id);
            String createdDate = String.valueOf([SELECT CreatedDate FROM Opportunity WHERE Id = :testOpportunity.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = 1;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(dateStr, '', valKey);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSectionDataAsHTML5() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,Type__c = 'Related Objects',
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":"","chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount"],"tablelistLabels":["Created Date","Opportunity Type","Amount"],"grouping":"stagename","dateFormat":"564/*","timeFormat":"123","numberFormat":"3","currencyFormat":"2","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
            );
            insert testSection; 
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
            insert testOpportunity; 
            String result = ROsectionAutomationController.getSectionDataAsHTML(testOpportunity.Id, testSection.Id);
            String createdDate = String.valueOf([SELECT CreatedDate FROM Opportunity WHERE Id = :testOpportunity.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = null;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(null, null, null);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    
    @IsTest
    static void testCurrencyNumberFormat() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Decimal value = 123.45678;
            String roundPattern = '2';
            String stringValue = String.valueOf(value);
            Decimal expected = value.setScale(Integer.valueOf(roundPattern));
            ROsectionAutomationController.handleCurrencyNumberFormat(stringValue, roundPattern);

            stringValue = 'invalid_value';
            roundPattern = '2';
            ROsectionAutomationController.handleCurrencyNumberFormat(stringValue, roundPattern);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetHeaderContent() {
        String headerContent;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Name = 'Test Section', Document_Template__c = testTemplate.Id,
                Header_Content__c = '<p>Test Header Content</p>'
            );
            insert testSection;
            headerContent = ROsectionAutomationController.getHeaderContent(testSection.Id);
        }
        Test.stopTest();
        Assert.areEqual(headerContent,'<p>Test Header Content</p>','Both should be same');
    }
    
    @IsTest
    static void testGetHeaderContentException() {
        String headerContent;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            headerContent = ROsectionAutomationController.getHeaderContent(null);  
        }
        Test.stopTest();
        Assert.areEqual('<p> Error while querying header Content through Automation - Log is generated </p>',headerContent,'Expected  - Id being passed is null');
    }
    
    
    @IsTest
    static void testGetSectionDataAsHTML6() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":,"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name","Account.Id"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name","Account ID.Account ID"],"grouping":"stagename","dateFormat":"564/","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}'
                );
            insert testSection; 
            Account testAccount = new Account(Name = 'Test Account');
            insert testAccount;
            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today(),Type = 'New Customer',
                                                          Amount = 244244, AccountId = testAccount.Id);
            insert testOpportunity; 
            Opportunity testOpportunity1 = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today(),Type = 'New Customer',
                                                           Amount = 242144, AccountId = testAccount.Id);
            insert testOpportunity1;  
            Opportunity testOpportunity2 = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today(),Type = 'New Customer',
                                                           Amount = 21244, AccountId = testAccount.Id);
            insert testOpportunity2;  
            String result = ROsectionAutomationController.getSectionDataAsHTML(testAccount.Id, testSection.Id);
            ROsectionAutomationController.dataFetchFromCurrentRecord(
                new List<Object>{ 'Name' }, 
                testAccount,        
                new Map<String, String>{ 'Name' => 'STRING' } 
            );
            String createdDate = String.valueOf([SELECT CreatedDate FROM Account WHERE Id = :testAccount.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = null;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(null, null, null);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSectionDataAsHTML7() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            
            Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name","Account.Id"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name","Account ID.Account ID"],"grouping":"","dateFormat":"564/*","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}' );
            insert testSection; 

            Account testAccount = new Account(Name = 'Test Account');
            insert testAccount;

            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today(),Type = 'New Customer',
                                                          Amount = 244244, AccountId = testAccount.Id);
            insert testOpportunity; 

            String result = ROsectionAutomationController.getSectionDataAsHTML(testAccount.Id, testSection.Id);
            ROsectionAutomationController.dataFetchFromCurrentRecord(
                new List<Object>{ 'Name' }, 
                testAccount,        
                new Map<String, String>{ 'Name' => 'STRING' } 
            );
            String createdDate = String.valueOf([SELECT CreatedDate FROM Account WHERE Id = :testAccount.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = null;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(null, null, null);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    
    @IsTest
    static void testGetSectionDataAsHTML8() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
                Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,
                Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name","Custom Object.Name"],"grouping":"","dateFormat":"564/*","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}' );
            insert testSection; 

            Account testAccount = new Account(Name = 'Test Account');
            insert testAccount;

            Opportunity testOpportunity = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today(),Type = 'New Customer', Amount = 244244, AccountId = testAccount.Id);
            insert testOpportunity; 
            
            String result = ROsectionAutomationController.getSectionDataAsHTML(testAccount.Id, testSection.Id);
            ROsectionAutomationController.dataFetchFromCurrentRecord(
                new List<Object>{ 'Name' }, 
                testAccount,        
                new Map<String, String>{ 'Name' => 'STRING' } 
            );
            String createdDate = String.valueOf([SELECT CreatedDate FROM Account WHERE Id = :testAccount.Id].CreatedDate);
            List<String> dateStr = createdDate.split(' ')[0].split('-');
            String timeStr = createdDate.split(' ')[1];
            Integer valKey = null;
            String formattedDateTime = ROsectionAutomationController.handleDateTimeFormatAsSelectedbyUser(null, null, null);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testSaveDocumentTemplateSectionDetails() {
        
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            Document_Template_Section__c testSection = new Document_Template_Section__c(
            Document_Template__c = testTemplate.Id,Name = 'Test Section', Sequence__c = 1,Type__c='Related Objects',
            Section_Content__c = '{"whereClause":"()","mainChildObject":"Opportunity","childLookupfieldAPIname":"AccountId","mainparentObject":"Account","SerialNumber":false,"subTotal":["Amount"],"displayChart":false,"selGraphvalue":null,"chartLabel":"Chart","chartNewPage":true,"newPage":false,"tablelistValues":["CreatedDate","Type","Amount","Name","Account.Name"],"tablelistLabels":["Created Date","Opportunity Type","Amount","Name","Account ID.Account Name","Custom Object.Name"],"grouping":"","dateFormat":"564/*","timeFormat":"124","numberFormat":"2","currencyFormat":"1","style":{"category":{"fontcolor":"","backgroundColor":"","fontfamily":"Times New Roman","fontsize":"14px"},"header":{"fontcolor":"#AF23F1","backgroundColor":"#40F70E","fontfamily":"Times New Roman","fontsize":"14px"}},"groupingCatVals":[{"label":"Prospecting","value":"Prospecting"},{"label":"Qualification","value":"Qualification"},{"label":"Needs Analysis","value":"Needs Analysis"},{"label":"Value Proposition","value":"Value Proposition"},{"label":"Id. Decision Makers","value":"Id. Decision Makers"},{"label":"Perception Analysis","value":"Perception Analysis"},{"label":"Proposal/Price Quote","value":"Proposal/Price Quote"},{"label":"Negotiation/Review","value":"Negotiation/Review"},{"label":"Closed Won","value":"Closed Won"},{"label":"Closed Lost","value":"Closed Lost"}]}' );
            insert testSection;
            SaveDocumentTemplatesection.saveDocumentTemplateSectionDetails(testSection);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testSaveDocumentTemplateSectionDetails1() {
        
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
                Document_Template_Section__c testSection = new Document_Template_Section__c(
                Document_Template__c = testTemplate.Id,Name = 'Test Section with Clause', Sequence__c = 1,Type__c='Context',
                Section_Content__c = 'Happy Testing' 
            );
            insert testSection; 
            SaveDocumentTemplatesection.saveDocumentTemplateSectionDetails(testSection);
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
    
    @IsTest
    static void testGetSearchedContentVersions() {
        List<contentversion> files;
        List<contentversion> allFiles;
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us) {
            List<ContentVersion> testContentVersions = new List<ContentVersion>{
                new ContentVersion(Title = 'Test Image 1', PathOnClient  = 'Test1.jpg', VersionData = Blob.valueOf('Test image data 1')),
                new ContentVersion(Title = 'Test Image 2', PathOnClient  = 'Test2.jpg', VersionData = Blob.valueOf('Test image data 2')),
                new ContentVersion(Title = 'Other File', PathOnClient  = 'Test3.jpg', VersionData = Blob.valueOf('Test image data 3'))
            };
            insert testContentVersions;
            files = FooterClass.getSearchedContentVersions('Test');
            allFiles = FooterClass.getContentVersions();
        }
        Test.stopTest();
        Assert.areNotEqual(allFiles.size(), files.size(), 'Based on Test Data');
    }
    
    
    @IsTest
    static void cloneDocumentTemplate() {
        Test.startTest();
        User us = DexUtilTestDataFactory.CreateTestUser();
        System.runAs(us){
            Document_Template__c testTemplate = new Document_Template__c(Name = 'Test Template');
            insert testTemplate;
            SaveDocumentTemplate.cloneDocumentTemplate(testTemplate, null);                
        }
        Test.stopTest();
        Assert.isTrue(true);
    }
}