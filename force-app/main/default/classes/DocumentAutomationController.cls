/**
* Class			    : DocumentAutomationController
* Developer			: Rahul Bejgam (ASE - Dextara)
* Created Date		: 08/03/2023
* @description		: This class creates the HTML content for Document Record Generation and passes it to the Queueable Class.
* Last Modified Date: 08/13/2023
*/
public with sharing class DocumentAutomationController {
    /**
     * Represents an instance of the Safely class for handling safe operations.
     */
    public static Safely safe = new Safely();

    /**
     * @description : Custom exception class used for handling safe operations.
     */
    public class SafeClassException extends Exception {  }

    /**
     * @description Generates a PDF document without preview based on the provided parameters.
     * @param docParam List of parameters for generating the document
     *                 - recordId: String ID of the record
     *                 - templateId: String ID of the document template
     */
    @InvocableMethod(label='Generate PDF Document' description='Generates PDF document without preview')  
    public static void autoGenerateDocumentRecord(List<recordParameters> docParam) {
        recordParameters inputIds = docParam[0];
        String recordId = inputIds.recordId;
        String templateId = inputIds.templateId;

        try {            
            Id insertedDocumentId;
            String documentContent = '';
            String attachmentName = (inputIds.documentName != null) ? (inputIds.documentName + '.pdf') : ((String) recordId + '.pdf');
            Document__c documentRecord = new Document__c();
            Document__c sectionContentRecord = new Document__c();
            List<Document__c> docArrtoUpdate = new List<Document__c> {};
            List<Document__c> documentToInsert = new List<Document__c> {};
            Map<String,String> headerFooterSectionMap = new Map<String,String> {};
            List<Document_Template_Section__c> allDataSections = DisplayPDFController.getTemplateSections(templateId, recordId, null);
        
            for(Document_Template_Section__c singleDataSection : allDataSections) {
                if(singleDataSection.Type__c == 'Header') {
                    headerFooterSectionMap.put('\"header\"',singleDataSection.Section_Content__c);
                } else if (singleDataSection.Type__c == 'Footer') {
                    headerFooterSectionMap.put('\"footer\"',singleDataSection.Section_Content__c);
                } else if(singleDataSection.Type__c != 'Related Objects') {
                    documentContent = documentContent + singleDataSection.Section_Content__c;
                } else if(singleDataSection.Type__c == 'Related Objects') {
                    if(singleDataSection.New_Page__c == true){
                        documentContent = documentContent + '<table class="newPagetableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    } else {
                        documentContent = documentContent + '<table class="tableMainClass">' + ROsectionAutomationController.getHeaderContent(singleDataSection.Id).replace('<table>','').replace('</table>','');
                    }                    
                    documentContent = documentContent + ROsectionAutomationController.getSectionDataAsHTML(recordId, singleDataSection.Id) + '</table>';
                }            
            }
            
            sectionContentRecord.Document_Body__c = documentContent;
            sectionContentRecord.Document_Template__c = templateId;
            sectionContentRecord.Document_Content__c = String.valueof(headerFooterSectionMap).replace('\"header\"=','\"header\":').replace('\"footer\"=','\"footer\":');
            sectionContentRecord.Object_Id__c = recordId;            
            documentToInsert.add(sectionContentRecord);
            
            Savepoint sp = Database.setSavepoint();
            List<Database.SaveResult> sResult = safe.doInsert(documentToInsert);
            List<String> errorList = Safely.safeClassExceptionHandlerInsert(sResult);
            
            if(errorList.size()>0) {
                Database.rollback(sp);
                throw new SafeClassException(String.join( errorList, ', ' ));
            }
            
            for(Integer i=0;i<sResult.size();i++) {
                if (sResult.get(i).isSuccess()) {
                    if(sResult.get(i).getId() != null) {
                        insertedDocumentId = sResult.get(i).getId();
                    }
                }               
            }
            
            /* Queueing the process for a different Transaction */
            System.enqueueJob(new sendEmailAutomation(insertedDocumentId, attachmentName, recordId));
        }  catch (Exception ex) {
            LogHandler.createLog((Id) null,'documentAutomationController.autoGenerateDocumentRecord()','Template Id- '+templateId+' '+ex.getLineNumber()+ex.getStackTraceString()+ex.getCause(),ex.getMessage(),'Exception');
        }
    } 
    
    /**
     * @description : Wrapper class for the parameters required to generate a PDF document.
     */
    public class RecordParameters {
        /**
         * The ID of the record for which the PDF document is generated.
         */
        @InvocableVariable(required=true) public String recordId;

        /**
         * The ID of the template used to generate the PDF document.
         */
        @InvocableVariable(required=true) public String templateId;

        /**
         * Optional: The name of the document. If not provided, the record ID will be used.
         */
		@InvocableVariable public String documentName;         
    }
}